#version 450

struct Triangle
{
	vec3 v0;
	vec3 v1;
	vec3 v2;
	
	vec2 t0;
	vec2 t1;
	vec2 t2;
};

layout (binding = 0, rgba8) uniform writeonly image2D resultImage;


layout(std430, binding = 1) buffer TrianglesBuffer 
{
   Triangle triangles[ ];
};

layout(binding = 2) uniform RayTracerUBO 
{
    int resX;
	int resY;
	int polygonCnt;
};

layout(binding = 3) uniform sampler2D inputTex;

layout (local_size_x = 8) in;

layout(push_constant) uniform PushConsts 
{
	mat4 view;
} pushConsts;

float rayTriangleIntersectFast( vec3 orig, vec3 dir, vec3 v0, vec3 v1, vec3 v2, out vec2 uv) 
{ 
    // compute plane's normal
    vec3 v0v1 = v1 - v0; 
    vec3 v0v2 = v2 - v0; 
    // no need to normalize
    vec3 pvec = cross(dir, v0v2); 
    float det = dot(v0v1, pvec);
 
	if (det < 0.001) return -1.0; 
  
   float invDet = 1 / det; 
 
    vec3 tvec = orig - v0; 
    
	float u = dot(tvec, pvec) * invDet; 
    if (u < 0 || u > 1) return -1.0;
 
    vec3 qvec = cross(tvec,v0v1); 
    float v = dot(dir, qvec) * invDet; 
    if (v < 0 || u + v > 1) return -1.0; 
 
    float t = dot(v0v2, qvec) * invDet; 
 
	uv=vec2(u,v);
	
    return t; 
} 


void main() 
{
    uint rayIdx = gl_GlobalInvocationID.x;
	
	ivec2 pixelPos = ivec2(rayIdx%resX, rayIdx/resX);
	
	float y= -0.5+pixelPos.y/float(resY);
	float x= -0.5+pixelPos.x/float(resX);
	float planeDis = 0.5f;
	
	vec3 dir= (pushConsts.view * vec4(x,y, -planeDis, 0.0)).xyz;
	vec3 origin=pushConsts.view[3].xyz;
	
	
	
	float closestPoint= 100000.0f;
	vec2 texCoord;
	
	for (int triangleIdx=0; triangleIdx< polygonCnt; ++triangleIdx)
	{
		vec2 uv;
		float paramT = rayTriangleIntersectFast( origin, dir , triangles[triangleIdx].v0, triangles[triangleIdx].v1, triangles[triangleIdx].v2, uv);
		if (paramT>= 0.0 && paramT< closestPoint)
		{
			closestPoint=paramT;
			texCoord = uv.x * triangles[triangleIdx].t1 + uv.y * triangles[triangleIdx].t2 + (1.0 -uv.x - uv.y) * triangles[triangleIdx].t0;
		}
	}
	
	if (closestPoint < 100000.0-1.0)
	{
		imageStore(resultImage, ivec2(rayIdx%resX, resY - rayIdx/resX), vec4(texture(inputTex, texCoord).rgb,1.0));
	}
	else
	{
		imageStore(resultImage, ivec2(rayIdx%resX, resY - rayIdx/resX), vec4(0.3f, 0.3, 0.3, 1.0));
	}
	
}

